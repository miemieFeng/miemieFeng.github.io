<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python打包exe,将冰墩墩送给你爱的人</title>
    <link href="/python%E6%89%93%E5%8C%85exe,%E5%B0%86%E5%86%B0%E5%A2%A9%E5%A2%A9%E9%80%81%E7%BB%99%E4%BD%A0%E7%88%B1%E7%9A%84%E4%BA%BA/"/>
    <url>/python%E6%89%93%E5%8C%85exe,%E5%B0%86%E5%86%B0%E5%A2%A9%E5%A2%A9%E9%80%81%E7%BB%99%E4%BD%A0%E7%88%B1%E7%9A%84%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近大家都有冰墩墩,抢不到就去github拉一个</p></blockquote><h3 id="一、拉项目（略）"><a href="#一、拉项目（略）" class="headerlink" title="一、拉项目（略）"></a>一、拉项目（略）</h3><h3 id="二、pip安装pyinstaller"><a href="#二、pip安装pyinstaller" class="headerlink" title="二、pip安装pyinstaller"></a>二、pip安装pyinstaller</h3><pre><code class="hljs">pip3 install pyinstaller</code></pre><h3 id="三、使用pyinstaller打包成exe发送给你爱的人"><a href="#三、使用pyinstaller打包成exe发送给你爱的人" class="headerlink" title="三、使用pyinstaller打包成exe发送给你爱的人"></a>三、使用pyinstaller打包成exe发送给你爱的人</h3><p>打包命令 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Pyinstaller -F setup<span class="hljs-selector-class">.py</span> 打包exe<br>Pyinstaller -F -w setup<span class="hljs-selector-class">.py</span> 不带控制台的打包<br>Pyinstaller -F -<span class="hljs-selector-tag">i</span> xx<span class="hljs-selector-class">.ico</span> setup<span class="hljs-selector-class">.py</span> 打包指定exe图标打包<br><br></code></pre></td></tr></table></figure><p><img src="http://47.108.248.23:8090/upload/2022/02/b7701875be59fa6a2651cbab82b319b-fcc39472663d4237b693d39ede0bad43.png" alt="b7701875be59fa6a2651cbab82b319b.png"></p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><img src="http://47.108.248.23:8090/upload/2022/02/image-5773bb8dbb3b4e5084dcd4affcd21a36.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用黑群晖搭建旁路由</title>
    <link href="/%E4%BD%BF%E7%94%A8%E9%BB%91%E7%BE%A4%E6%99%96%E6%90%AD%E5%BB%BA%E6%97%81%E8%B7%AF%E7%94%B1/"/>
    <url>/%E4%BD%BF%E7%94%A8%E9%BB%91%E7%BE%A4%E6%99%96%E6%90%AD%E5%BB%BA%E6%97%81%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>家里购置了switch自然是需要全家富强才可以更舒适的使用</p></blockquote><h3 id="一、安装虚拟机套件"><a href="#一、安装虚拟机套件" class="headerlink" title="一、安装虚拟机套件"></a>一、安装虚拟机套件</h3><p><strong>这里我选择安装旧版虚拟机套件，因为新版需要vip才可以开启cpu兼容</strong><br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/image-602efa6a1b774c4397f317bbb091fcc0.png" alt="image-602efa6a1b774c4397f317bbb091fcc0"><br>可以看到我这里安装了2.31版</p><h3 id="二、下载旁路由镜像"><a href="#二、下载旁路由镜像" class="headerlink" title="二、下载旁路由镜像"></a>二、下载旁路由镜像</h3><p><strong>这里我选择下载恩山大佬第一的镜像，下载地址<a href="https://openwrt.mpdn.fun:8443/">https://openwrt.mpdn.fun:8443</a></strong></p><h3 id="三、导入镜像"><a href="#三、导入镜像" class="headerlink" title="三、导入镜像"></a>三、导入镜像</h3><p>打开虚拟机软件，选择新增，导入pc镜像<img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116192456.png" alt="20221116192456">等待上传完毕即可</p><h3 id="四、启动镜像"><a href="#四、启动镜像" class="headerlink" title="四、启动镜像"></a>四、启动镜像</h3><p>首先选择虚拟机-导入<br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116192548.png" alt="20221116192548"><br>导入刚才上传的镜像<br>1、然后启动并连接。在跳出来的窗口界面输入命令，vi etc/config/network ，修改一下软路由的IP。<br>2、在option ipaddr后面把IP修改成为和主路由一个网段的，可以按 i 键进行修改，比如我设置成192.1168。1.10，修改完后按Esc退出，接着输入命令 ：wq ，保存刚才的修改。<br>3、再输入 passwd 修改一下密码，修改的时候密码不会显示，不用担心，输完按回车就行，要连续输入两次。<br>4、最后输入命令 reboot 进行重启就OK了。<br>5、在浏览器输入刚才咱们修改过的IP，这时候已经可以进入Openwrt的登陆界面了，填上自己设置的密码就可以进系统了</p><p><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116192621.png" alt="20221116192621"></p><h3 id="五、Openwrt系统配置"><a href="#五、Openwrt系统配置" class="headerlink" title="五、Openwrt系统配置"></a>五、Openwrt系统配置</h3><p>系统装完了，要想正常使用还得配置一下，找到左侧菜单 网络—接口，选择LAN的接口进行修改。<br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116192643.png" alt="20221116192643"><br>网关和dns填自己的网关（忽略此接口处打上勾，不让旁路由提供DHCP服务，避免和主路由冲突。）<br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116192705.png" alt="20221116192705"></p><h3 id="六、修改上网设备ip"><a href="#六、修改上网设备ip" class="headerlink" title="六、修改上网设备ip"></a>六、修改上网设备ip</h3><p>此时将上网设备的ip和dns改为我们旁路由的地址即可，我这里是改了小米路由器做二级路由</p><blockquote><p>此时连接了小米路由器的设备都可以通过旁路由来设置策略了</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旁路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger2 常用注解整理</title>
    <link href="/swagger2%20%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/"/>
    <url>/swagger2%20%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近用到swagger想着整理一下常用注解(只能说是真的不好用,写一堆注解头痛)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs language">@Api：用在请求的类上，表示对类的说明<br>    tags=&quot;说明该类的作用，可以在UI界面上看到的注解&quot;<br>    value=&quot;该参数没什么意义，在UI界面上也看到，所以不需要配置&quot;<br> <br> <br>@ApiOperation：用在请求的方法上，说明方法的用途、作用<br>    value=&quot;说明方法的用途、作用&quot;<br>    notes=&quot;方法的备注说明&quot;<br> <br> <br>@ApiImplicitParams：用在请求的方法上，表示一组参数说明<br>    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面<br>        name：参数名<br>        value：参数的汉字说明、解释<br>        required：参数是否必须传<br>        paramType：参数放在哪个地方<br>            · header --&gt; 请求参数的获取：@RequestHeader<br>            · query --&gt; 请求参数的获取：@RequestParam<br>            · path（用于restful接口）--&gt; 请求参数的获取：@PathVariable<br>            · body（不常用）<br>            · form（不常用）    <br>        dataType：参数类型，默认String，其它值dataType=&quot;Integer&quot;       <br>        defaultValue：参数的默认值<br> <br> <br>@ApiResponses：用在请求的方法上，表示一组响应<br>    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br>        code：数字，例如400<br>        message：信息，例如&quot;请求参数没填好&quot;<br>        response：抛出异常的类<br> <br> <br>@ApiModel：用于响应类上，表示一个返回响应数据的信息<br>            （这种一般用在post创建的时候，使用@RequestBody这样的场景，<br>            请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br>    @ApiModelProperty：用在属性上，描述响应类的属性<br></code></pre></td></tr></table></figure><h3 id="1、-Api"><a href="#1、-Api" class="headerlink" title="1、@Api"></a>1、@Api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">@Api(tags=&quot;APP用户注册Controller&quot;)<br></code></pre></td></tr></table></figure><blockquote><p>@Api：用在请求的类上，说明该类的作用<br>     tags=”说明该类的作用”<br>     value=”该参数没什么意义，所以不需要配置”</p></blockquote><h3 id="2、-ApiOperation"><a href="#2、-ApiOperation" class="headerlink" title="2、@ApiOperation"></a>2、@ApiOperation</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">@ApiOperation(value=&quot;用户登录&quot;,notes=&quot;填写账号密码都是必填&quot;)<br></code></pre></td></tr></table></figure><blockquote><p>@ApiOperation：用在请求的方法上，说明方法的作用<br>@ApiOperation：”用在请求的方法上，说明方法的作用”<br>    value=”说明方法的作用”<br>    notes=”方法的备注说明”</p></blockquote><h3 id="3、-ApiImplicitParams和-ApiImplicitParam这两个用的比较多"><a href="#3、-ApiImplicitParams和-ApiImplicitParam这两个用的比较多" class="headerlink" title="3、@ApiImplicitParams和@ApiImplicitParam这两个用的比较多"></a><strong>3、@ApiImplicitParams和@ApiImplicitParam</strong>这两个用的比较多</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs language">@ApiImplicitParams(&#123;<br>    @ApiImplicitParam(name=&quot;mobile&quot;,value=&quot;手机号&quot;,required=true,paramType=&quot;form&quot;),<br>    @ApiImplicitParam(name=&quot;password&quot;,value=&quot;密码&quot;,required=true,paramType=&quot;form&quot;),<br>    @ApiImplicitParam(name=&quot;age&quot;,value=&quot;年龄&quot;,required=true,paramType=&quot;form&quot;,dataType=&quot;Integer&quot;)<br>&#125;)<br>//@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>     //@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>     //@ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息       <br></code></pre></td></tr></table></figure><blockquote><p>@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>     @ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>     @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息<br>        name：参数名<br>        value：参数的汉字说明、解释<br>        required：参数是否必须传<br>        paramType：参数放在哪个地方<br>            · header –&gt; 请求参数的获取：@RequestHeader<br>            · query –&gt; 请求参数的获取：@RequestParam<br>            · path（用于restful接口）–&gt; 请求参数的获取：@PathVariable<br>            · body（不常用）<br>            · form（不常用）<br>        dataType：参数类型，默认String，其它值dataType=”Integer”<br>        defaultValue：参数的默认值</p></blockquote><h3 id="4、-ApiResponses"><a href="#4、-ApiResponses" class="headerlink" title="4、@ApiResponses"></a>4、@ApiResponses</h3><p>@ApiOperation(value = “select1请求”,notes = “多个参数，多种的查询参数类型”)</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@ApiResponses</span>(&#123;<br>    <span class="hljs-variable">@ApiResponse</span>(code=<span class="hljs-number">400</span>,message=<span class="hljs-string">&quot;请求参数没填好&quot;</span>),<br>    <span class="hljs-variable">@ApiResponse</span>(code=<span class="hljs-number">404</span>,message=<span class="hljs-string">&quot;请求路径没有或页面跳转路径不对&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>@ApiResponses：用于请求的方法上，表示一组响应<br>     @ApiResponses：用于请求的方法上，表示一组响应<br>     @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br>        code：数字，例如400<br>        message：信息，例如”请求参数没填好”<br>        response：抛出异常的类</p></blockquote><h3 id="5、-ApiModel"><a href="#5、-ApiModel" class="headerlink" title="5、@ApiModel"></a>5、@ApiModel</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs language">@ApiModel(description= &quot;返回响应数据&quot;)<br>public class RestMessage implements Serializable&#123;<br> <br>    @ApiModelProperty(value = &quot;是否成功&quot;)<br>    private boolean success=true;<br>    @ApiModelProperty(value = &quot;返回对象&quot;)<br>    private Object data;<br>    @ApiModelProperty(value = &quot;错误编号&quot;)<br>    private Integer errCode;<br>    @ApiModelProperty(value = &quot;错误信息&quot;)<br>    private String message;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@ApiModel：用于响应类上，表示一个返回响应数据的信息<br>     @ApiModel：用于响应类上，表示一个返回响应数据的信息<br>            （这种一般用在post创建的时候，使用@RequestBody这样的场景，<br>            请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br>     @ApiModelProperty：用在属性上，描述响应类的属性</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>swagger</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>layui使用富文本编辑器并回显</title>
    <link href="/layui%E4%BD%BF%E7%94%A8%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%B9%B6%E5%9B%9E%E6%98%BE/"/>
    <url>/layui%E4%BD%BF%E7%94%A8%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%B9%B6%E5%9B%9E%E6%98%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>正好要做一个文章管理,记录一下遇到的坑</p></blockquote><p>1.引入富文本编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs language">var layedit = layui.layedit;<br>layedit.set(&#123;<br>uploadImage: &#123;<br>url: &#x27;/v1/openApi/uploadImage&#x27; //接口url<br>,type: &#x27;&#x27; //默认post<br>&#125;<br>&#125;);<br>var index = layedit.build(&#x27;demo&#x27;);<br></code></pre></td></tr></table></figure><blockquote><p>这里我接入了图片上传</p></blockquote><p><strong>图片上传需要定义好接口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs language">&#123;<br>  &quot;code&quot;: 0 //0表示成功，其它失败<br>  ,&quot;msg&quot;: &quot;&quot; //提示信息 //一般上传失败后返回<br>  ,&quot;data&quot;: &#123;<br>    &quot;src&quot;: &quot;图片路径&quot;<br>    ,&quot;title&quot;: &quot;图片名称&quot; //可选<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.富文本编辑器回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">&lt;textarea id=&quot;demo&quot; style=&quot;display: none;&quot; name=&quot;article&quot; autocomplete=&quot;off&quot; placeholder=&quot;内容&quot; th:text=&quot;*&#123;article&#125;&quot; &gt;&lt;/textarea&gt;<br></code></pre></td></tr></table></figure><p>这里我使用了th:text</p><p>3.最终效果<br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116193413.png" alt="20221116193413"></p>]]></content>
    
    
    <categories>
      
      <category>layui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决fatal:unable to connect to gitee.com:gitee.com[0:180.97.125.228]:errno=Unknown error</title>
    <link href="/%20%E8%A7%A3%E5%86%B3%20fatal:%20unable%20to%20connect%20to%20gitee.com:%20gitee.com%5B0:%20180.97.125.228%5D:%20errno=Unknown%20error/"/>
    <url>/%20%E8%A7%A3%E5%86%B3%20fatal:%20unable%20to%20connect%20to%20gitee.com:%20gitee.com%5B0:%20180.97.125.228%5D:%20errno=Unknown%20error/</url>
    
    <content type="html"><![CDATA[<p>fatal: unable to connect to gitee.com:<br>gitee.com[0: 180.97.125.228]: errno=Unknown error</p><p>直接找到.gitconfig文件，把这几个配置删掉，就可以正常push了</p><p>[url “<a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#x6f;&#x6d;</a>“]<br>insteadOf = <a href="https://github.com/">https://github.com/</a>:<br>[url “git://“]<br>insteadOf = https://<br>[url “https://“]<br>insteadOf = git://</p><blockquote><p>百度好久都找不到 焦躁哦</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app封装公共请求(携带token)</title>
    <link href="/uni-app%E5%B0%81%E8%A3%85%E5%85%AC%E5%85%B1%E8%AF%B7%E6%B1%82(%E6%90%BA%E5%B8%A6token)/"/>
    <url>/uni-app%E5%B0%81%E8%A3%85%E5%85%AC%E5%85%B1%E8%AF%B7%E6%B1%82(%E6%90%BA%E5%B8%A6token)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在日常开发过程中,一般请求我们都会携带token,以保证安全性</p></blockquote><h3 id="1、在工程目录下新建个common文件夹"><a href="#1、在工程目录下新建个common文件夹" class="headerlink" title="1、在工程目录下新建个common文件夹"></a>1、在工程目录下新建个common文件夹</h3><p>在common目录下新增request.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs language">//请求函数<br>const request = (url = &#x27;&#x27;, data = &#123;&#125;,type = &#x27;POST&#x27;, header = &#123;&#125;) =&gt; &#123;<br>// 缓存中获取token <br> header.token = data.token? data.token:uni.getStorageSync(&#x27;token&#x27;);<br> //请求地址<br> var baseUrl =  &#x27;http://localhost:9001/v1/openApi/&#x27;;  <br>    return new Promise((resolve, reject) =&gt; &#123;<br>        uni.request(&#123;<br>            method: type,<br>            url: baseUrl +url,<br>            data: data,<br>            header: header,<br>            dataType: &#x27;json&#x27;,        <br>        &#125;).then((response) =&gt; &#123;<br>            uni.hideLoading();<br>            uni.stopPullDownRefresh();<br>            let [error, res] = response;<br><br>console.log(res,&#x27;res&#x27;);<br>            if(res.data.code == 200)&#123;<br>                setTimeout(function () &#123;<br>                    resolve(res.data);<br>                &#125;, 1000);<br>            &#125;else if(res.data.code == 401)&#123;   //token失效时重新登录<br>                uni.showToast(&#123;<br>                    title:res.data.msg,<br>                    image:&#x27;../../static/public/close.png&#x27;,<br>                    duration: 2000,<br>                &#125;);<br>setTimeout(function()&#123;<br>uni.navigateTo(&#123;<br>    url: &#x27;/pages/login/login_vfcode&#x27;,<br>complete(e)&#123;<br>console.log(e,&#x27;eeeeeeeeee&#x27;)<br>&#125;<br>&#125;);<br>&#125;,1000);<br><br>            &#125; else if(res.data.code == -100)&#123;   //-100时返回处理<br>uni.showToast(&#123;<br>    title:res.data.msg,<br>    duration: 1000,<br>&#125;);<br>setTimeout(function () &#123;<br>//回调<br>    resolve(res.data);<br>&#125;, 1000);<br><br>            &#125;else &#123;  //其它code 返回提示<br>                uni.showToast(&#123;<br>                    title:res.data.msg,<br>                    image:&#x27;../../static/public/close.png&#x27;,<br>                    duration: 2000,<br>                &#125;);<br>            &#125;<br>        &#125;).catch(error =&gt; &#123;<br>            uni.hideLoading();<br>            uni.stopPullDownRefresh();<br>            let [err, res] = error;<br>            reject(err)<br>console.log(error ,&#x27;请求返回error&#x27;)<br>        &#125;)<br>    &#125;);<br>&#125;<br> <br>//定义对象<br>var api = &#123;<br>request<br>&#125;;<br> <br>export default api<br></code></pre></td></tr></table></figure><p>这里我是把token加到了请求头里</p><h3 id="2、在-main-js-中引入、定义"><a href="#2、在-main-js-中引入、定义" class="headerlink" title="2、在 main.js 中引入、定义"></a>2、在 main.js 中引入、定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs language">import request from &#x27;common/request.js&#x27;  //引入封装全局<br> <br> <br> <br> <br>Vue.prototype.$api = request  <br></code></pre></td></tr></table></figure><h3 id="3、实际使用"><a href="#3、实际使用" class="headerlink" title="3、实际使用"></a>3、实际使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs language">this.$api.request(&#x27;getBookingList&#x27;, <br>&#123;time: &#x27;2021-11-10&#x27;&#125;, <br>&#x27;post&#x27;).then((res) =&gt; &#123;<br>console.log(res, &#x27;res----&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>uni-app</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 fatal:unable to connect to gitee.com:gitee.com[0:180.97.125.228]：errno=Unknown error</title>
    <link href="/%E8%A7%A3%E5%86%B3%E7%BE%A4%E8%BE%89%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%90%8Essh%E8%BF%9E%E6%8E%A5%E5%87%BA%E7%8E%B0connection%20is%20closed%20by%20foreign%20host/"/>
    <url>/%E8%A7%A3%E5%86%B3%E7%BE%A4%E8%BE%89%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%90%8Essh%E8%BF%9E%E6%8E%A5%E5%87%BA%E7%8E%B0connection%20is%20closed%20by%20foreign%20host/</url>
    
    <content type="html"><![CDATA[<h3 id="上次内网穿透后-发现在家里一直无法通过穿透服务器连接群辉ssh"><a href="#上次内网穿透后-发现在家里一直无法通过穿透服务器连接群辉ssh" class="headerlink" title="上次内网穿透后,发现在家里一直无法通过穿透服务器连接群辉ssh"></a>上次内网穿透后,发现在家里一直无法通过穿透服务器连接群辉ssh</h3><p><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116194141.png" alt="20221116194141"></p><h3 id="后来发现是被群辉拉入了黑名单-解除就可以了"><a href="#后来发现是被群辉拉入了黑名单-解除就可以了" class="headerlink" title="后来发现是被群辉拉入了黑名单,解除就可以了"></a>后来发现是被群辉拉入了黑名单,解除就可以了</h3><p><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116194201.png" alt="20221116194201"></p><blockquote><p>取消自动封锁,或者把ip移出来</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传文件nginx报错(413 Request Entity Too Large)</title>
    <link href="/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6nginx%E6%8A%A5%E9%94%99(413%20Request%20Entity%20Too%20Large)/"/>
    <url>/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6nginx%E6%8A%A5%E9%94%99(413%20Request%20Entity%20Too%20Large)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>部署舔狗日记的时候发现,字体文件太大无法上传.</p></blockquote><p>这可能是由于 Nginx 的上传大小限制所导致的。<br>可以在 Nginx 的配置文件下的 http 节点加入 client_max_body_size 1024m<br>就解决了<br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116194510.png" alt="20221116194510"></p>]]></content>
    
    
    <categories>
      
      <category>NGINX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群晖frp内网穿透</title>
    <link href="/%E9%BB%91%E7%BE%A4%E6%99%96frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/%E9%BB%91%E7%BE%A4%E6%99%96frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间闲来无事,吧家里的旧笔记本改造成了黑群晖.<br>开通内网穿透踩了很多坑,特此记录一下</p></blockquote><p><strong>frp分别有服务端(frps)和客户端(frpc)</strong></p><h2 id="一、下面先说服务端"><a href="#一、下面先说服务端" class="headerlink" title="一、下面先说服务端"></a>一、下面先说服务端</h2><p>因为是第一次操作,所以没有使用docker管理.有时间一定要换成docker</p><h4 id="1、首先下载frp（根据自己的系统选择）"><a href="#1、首先下载frp（根据自己的系统选择）" class="headerlink" title="1、首先下载frp（根据自己的系统选择）"></a>1、首先下载frp（根据自己的系统选择）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure><h4 id="2、解压命令解压出来"><a href="#2、解压命令解压出来" class="headerlink" title="2、解压命令解压出来"></a>2、解压命令解压出来</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">tar -zxvf frp_0.33.0_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure><h4 id="3、进入-frp-目录"><a href="#3、进入-frp-目录" class="headerlink" title="3、进入 frp 目录"></a>3、进入 frp 目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">cd frp_0.33.0_linux_amd64<br></code></pre></td></tr></table></figure><h4 id="4、配置服务器端文件"><a href="#4、配置服务器端文件" class="headerlink" title="4、配置服务器端文件"></a>4、配置服务器端文件</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vi</span> frps.ini<br><br></code></pre></td></tr></table></figure><blockquote><p>下面我把配置文件贴出来</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs language">[common]#必填<br>bind_port = 1231  #服务端口（可自定义）<br>vhost_http_port = 1232 #访问端口（可自定义）<br>dashboard_port = 7500 #dashboard 界面端口<br>dashboard_user = 账号#登录 dashboard 用户名<br>dashboard_pwd = 密码#登录 dashboard 密码<br>max_pool_count = 5#最大连接池数量<br>authentication_timeout = 900#超时验证时间<br>subdomain_host = 你的域名#自定义二级域名（这里我用了我另一个备案的域名）<br>[ssh]<br>listen_port = 6000 #访问端口<br>auth_token = 123321#用户身份认证<br></code></pre></td></tr></table></figure><h4 id="6、启动服务器端frps（测试启动）"><a href="#6、启动服务器端frps（测试启动）" class="headerlink" title="6、启动服务器端frps（测试启动）"></a>6、启动服务器端frps（测试启动）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">./frps -c ./frps.ini<br></code></pre></td></tr></table></figure><blockquote><p>如果没有报错，那么服务端的操作暂时完毕</p></blockquote><p>二、开始说客户端（群晖端）</p><blockquote><p>一开始群晖也是使用了和上边一样的操作，只是配置文件不同，后来发现一个弊端—-&gt;每次重启群晖后，frpc不会自启动。或者因为不可抗力因素，frpc关闭了很不方便</p></blockquote><h4 id="1、下载docker套件"><a href="#1、下载docker套件" class="headerlink" title="1、下载docker套件"></a>1、下载docker套件</h4><p>首先我们打开套件中心，搜索docker并安装。docker应该算是黑群晖必备套件我就不细说了</p><h4 id="2、下载frp"><a href="#2、下载frp" class="headerlink" title="2、下载frp"></a>2、下载frp</h4><p><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116194700.png" alt="20221116194700"></p><h3 id="2、启动容器"><a href="#2、启动容器" class="headerlink" title="2、启动容器"></a>2、启动容器</h3><p>映射frpc文件，容器内路径为<code>/frp/frpc.ini</code>，容器外路径随意，自己选</p><h4 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h4><p>一定要注意，我们的配置文件是`frpc.ini，下面我把文件内容贴出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs language">[common]<br>server_addr = 服务端ip<br>server_port = 端口设置<br>auth_token = 随便设置<br>pool_count = 1<br>[ssh]<br>type = tcp<br>local_ip = 本地群晖ip<br>local_port = 22<br>remote_port = 6000<br>use_compression = true<br>use_encryption = true<br>[qh]#如果有多个端口一定不能和下面的名字重复了<br>type = http<br>local_port = 5000<br>subdomain = qh#这里一定是写你的二级域名前缀（坑点）<br>[ql]<br>type = http<br>local_port = 5700<br>subdomain = ql<br>[nl]<br>type = http<br>local_port = 5703<br>subdomain = nl<br>[sn]<br>type = http<br>local_port = 8181<br>subdomain = sn<br><br></code></pre></td></tr></table></figure><h4 id="4、启动服务器端"><a href="#4、启动服务器端" class="headerlink" title="4、启动服务器端"></a>4、启动服务器端</h4><p>群晖启动服务端，进入高级设置，选择停止后重启，并且一定要选择使用和dockerhost相同网络</p><blockquote><p>此时如果容器没有无限容器那么说明已经是链接成功了，可以访问刚才自己配的地址去看，一定是域名加端口号访问。除非像我一样在服务端使用nginx分别反向代理</p></blockquote><h2 id="三、服务端frp后台运行"><a href="#三、服务端frp后台运行" class="headerlink" title="三、服务端frp后台运行"></a>三、服务端frp后台运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs language">nohup ./frps -c ./frps.ini &amp;<br></code></pre></td></tr></table></figure><p>最后贴上成果<br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116194719.png" alt="20221116194719"></p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的任务时间我做主(cron插件)</title>
    <link href="/%E6%88%91%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E6%88%91%E5%81%9A%E4%B8%BB(cron%E6%8F%92%E4%BB%B6)/"/>
    <url>/%E6%88%91%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E6%88%91%E5%81%9A%E4%B8%BB(cron%E6%8F%92%E4%BB%B6)/</url>
    
    <content type="html"><![CDATA[<h2 id="先说一下插件怎么使用"><a href="#先说一下插件怎么使用" class="headerlink" title="先说一下插件怎么使用"></a>先说一下插件怎么使用</h2><h3 id="1、点击浏览器右上角"><a href="#1、点击浏览器右上角" class="headerlink" title="1、点击浏览器右上角"></a>1、点击浏览器右上角</h3><p><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116194923.png" alt="20221116194923"></p><h3 id="2、打开开发者模式"><a href="#2、打开开发者模式" class="headerlink" title="2、打开开发者模式"></a>2、打开开发者模式</h3><p><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116194944.png" alt="20221116194944"></p><h3 id="3、拖入下载的压缩包即可使用啦"><a href="#3、拖入下载的压缩包即可使用啦" class="headerlink" title="3、拖入下载的压缩包即可使用啦"></a>3、拖入下载的压缩包即可使用啦</h3><blockquote><p>github地址：<a href="https://github.com/juillets/cron/releases">cron插件</a></p></blockquote><h2 id="下面说下浏览器插件的核心文件（manifest-json）"><a href="#下面说下浏览器插件的核心文件（manifest-json）" class="headerlink" title="下面说下浏览器插件的核心文件（manifest.json）"></a>下面说下浏览器插件的核心文件（manifest.json）</h2><blockquote><p>这个文件必须要有</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs language">&#123;<br>// 清单文件的版本，这个必须写，而且必须是2<br>&quot;manifest_version&quot;: 2,<br>// 插件的名称<br>&quot;name&quot;: &quot;Cron表达式生成&quot;,<br>// 插件的版本<br>&quot;version&quot;: &quot;1.0.0&quot;,<br>// 插件描述<br>&quot;description&quot;: &quot;Cron表达式生成&quot;,<br>// 图标，这里我偷懒全部用一个尺寸<br>&quot;icons&quot;: &#123;<br>&quot;16&quot;: &quot;img/icon.png&quot;,<br>&quot;48&quot;: &quot;img/icon.png&quot;,<br>&quot;128&quot;: &quot;img/icon.png&quot;<br>&#125;,<br>    <br>// 浏览器右上角图标设置，browser_action、page_action、app必须三选一<br>&quot;browser_action&quot;: &#123;<br>&quot;default_icon&quot;: &quot;img/icon.png&quot;,<br>&quot;default_title&quot;: &quot;Cron表达式生成&quot;,<br>&quot;default_popup&quot;: &quot;demo.html&quot;<br>&#125;,<br>&quot;options_ui&quot;: &#123;<br>&quot;page&quot;: &quot;demo.html&quot;,<br>// 添加一些默认的样式，推荐使用<br>&quot;chrome_style&quot;: true<br>&#125;,<br>//权限申请<br>&quot;permissions&quot;: [<br><br>],<br>//插件主页<br>&quot;homepage_url&quot;: &quot;http://47.108.248.23:8090/&quot;,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cron插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cron插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx的安装与配置</title>
    <link href="/nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="一、nginx的安装"><a href="#一、nginx的安装" class="headerlink" title="一、nginx的安装"></a>一、nginx的安装</h4><p>最近正好申请了ssl证书寻思重新配置一下nginx，做个记录。</p><h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><p>这里我选择下载安装包，所以先创建nginx的默认目录。</p><p>一般是放在<code>/usr/local</code>下</p><blockquote><p>以下操作在<code>/user/local</code>进行<br>本次下载非最新版，可自行更改版本号</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget -c https://nginx.org/download/nginx-1.10.1.tar.gz<br></code></pre></td></tr></table></figure><h5 id="2、解压安装包"><a href="#2、解压安装包" class="headerlink" title="2、解压安装包"></a>2、解压安装包</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxvf nginx-1.10.1.tar.gz<br></code></pre></td></tr></table></figure><h5 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h5><p>进入解压后的文件夹</p><blockquote><p>这里我们使用默认配置</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./configure<br></code></pre></td></tr></table></figure><h5 id="4、编译安装"><a href="#4、编译安装" class="headerlink" title="4、编译安装"></a>4、编译安装</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">make<br>make install<br></code></pre></td></tr></table></figure><h5 id="5、启动nginx"><a href="#5、启动nginx" class="headerlink" title="5、启动nginx"></a>5、启动nginx</h5><p>此时返回上一级目录便可看到nginx文件夹<br>进入/usr/local/nginx/sbin<br><img src="https://cdn.jsdelivr.net/gh/miemieFeng/blogImg/Blogs/20221116195150.png" alt="20221116195150"><br>输入<code>./nginx</code>即可启动nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">./nginx <span class="hljs-comment">#启动nginx</span><br>./nginx -s quit <span class="hljs-comment">#关闭nginx</span><br>./nginx -s reload <span class="hljs-comment">#重启nginx</span><br></code></pre></td></tr></table></figure><h4 id="二、配置nginx"><a href="#二、配置nginx" class="headerlink" title="二、配置nginx"></a>二、配置nginx</h4><p>进入/usr/local/nginx/conf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim nginx.conf<br></code></pre></td></tr></table></figure><p>修改自己所需要的配置即可</p>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
